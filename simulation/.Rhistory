par(mfrow=c(2,2))
sl_train = read_table(paste0("sl_train+", name.id, ".txt"), col_names = F)$X1
label_train = as.factor(read_table(paste0("label_train+", name.id, ".txt"), col_names = F)$X1)
plot(sl_train~label_train, main = "progression score vs label")
Y_train = read_table(paste0("Y_train+", name.id, ".txt"), col_names = F)$X1
plot(sl_train~Y_train, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_train~Y_train), col="red")
lines(lowess(Y_train, sl_train), col="blue")
library(readr)
setwd("/Users/MonicaW/Documents/GitHub/LWPR/results/scaleY")
t = 3
alpha = 0
name.id = paste0("t=", as.character(t), "+alpha=", as.character(alpha))
par(mfrow=c(2,2))
sl_train = read_table(paste0("sl_train+", name.id, ".txt"), col_names = F)$X1
label_train = as.factor(read_table(paste0("label_train+", name.id, ".txt"), col_names = F)$X1)
plot(sl_train~label_train, main = "progression score vs label")
Y_train = read_table(paste0("Y_train+", name.id, ".txt"), col_names = F)$X1
plot(sl_train~Y_train, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_train~Y_train), col="red")
lines(lowess(Y_train, sl_train), col="blue")
sl_test = read_table(paste0("sl_test+", name.id, ".txt"), col_names = F)$X1
label_test = as.factor(read_table(paste0("label_test+", name.id, ".txt"), col_names = F)$X1)
plot(sl_test~label_test, main = "progression score vs label")
Y_test = read_table(paste0("Y_test+", name.id, ".txt"), col_names = F)$X1
plot(sl_test~Y_test, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_test~Y_test), col="red")
lines(lowess(Y_test, sl_test), col="blue")
title(paste0("t=", as.character(t)))
mtext( paste0("t=", as.character(t)), outer = TRUE )
library(readr)
setwd("/Users/MonicaW/Documents/GitHub/LWPR/results/scaleY")
t = 3
alpha = 0
name.id = paste0("t=", as.character(t), "+alpha=", as.character(alpha))
par(mfrow=c(2,2))
sl_train = read_table(paste0("sl_train+", name.id, ".txt"), col_names = F)$X1
label_train = as.factor(read_table(paste0("label_train+", name.id, ".txt"), col_names = F)$X1)
plot(sl_train~label_train, main = "progression score vs label")
Y_train = read_table(paste0("Y_train+", name.id, ".txt"), col_names = F)$X1
plot(sl_train~Y_train, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_train~Y_train), col="red")
lines(lowess(Y_train, sl_train), col="blue")
sl_test = read_table(paste0("sl_test+", name.id, ".txt"), col_names = F)$X1
label_test = as.factor(read_table(paste0("label_test+", name.id, ".txt"), col_names = F)$X1)
plot(sl_test~label_test, main = "progression score vs label")
Y_test = read_table(paste0("Y_test+", name.id, ".txt"), col_names = F)$X1
plot(sl_test~Y_test, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_test~Y_test), col="red")
lines(lowess(Y_test, sl_test), col="blue")
mtext( paste0("t=", as.character(t)), outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = -21, outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = -10, outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = 0, outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = -1, outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = -15, outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = -18, outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = -17, outer = TRUE )
mtext( paste0("t=", as.character(t)), side = 3, line = -17, outer = TRUE, cex = 2)
t = 1
alpha = 0
name.id = paste0("t=", as.character(t), "+alpha=", as.character(alpha))
par(mfrow=c(2,2))
sl_train = read_table(paste0("sl_train+", name.id, ".txt"), col_names = F)$X1
label_train = as.factor(read_table(paste0("label_train+", name.id, ".txt"), col_names = F)$X1)
plot(sl_train~label_train, main = "progression score vs label")
Y_train = read_table(paste0("Y_train+", name.id, ".txt"), col_names = F)$X1
plot(sl_train~Y_train, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_train~Y_train), col="red")
lines(lowess(Y_train, sl_train), col="blue")
sl_test = read_table(paste0("sl_test+", name.id, ".txt"), col_names = F)$X1
label_test = as.factor(read_table(paste0("label_test+", name.id, ".txt"), col_names = F)$X1)
plot(sl_test~label_test, main = "progression score vs label")
Y_test = read_table(paste0("Y_test+", name.id, ".txt"), col_names = F)$X1
plot(sl_test~Y_test, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_test~Y_test), col="red")
lines(lowess(Y_test, sl_test), col="blue")
mtext( paste0("t=", as.character(t)), side = 3, line = -17, outer = TRUE, cex = 2)
t = 2
alpha = 0
name.id = paste0("t=", as.character(t), "+alpha=", as.character(alpha))
par(mfrow=c(2,2))
sl_train = read_table(paste0("sl_train+", name.id, ".txt"), col_names = F)$X1
label_train = as.factor(read_table(paste0("label_train+", name.id, ".txt"), col_names = F)$X1)
plot(sl_train~label_train, main = "progression score vs label")
Y_train = read_table(paste0("Y_train+", name.id, ".txt"), col_names = F)$X1
plot(sl_train~Y_train, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_train~Y_train), col="red")
lines(lowess(Y_train, sl_train), col="blue")
sl_test = read_table(paste0("sl_test+", name.id, ".txt"), col_names = F)$X1
label_test = as.factor(read_table(paste0("label_test+", name.id, ".txt"), col_names = F)$X1)
plot(sl_test~label_test, main = "progression score vs label")
Y_test = read_table(paste0("Y_test+", name.id, ".txt"), col_names = F)$X1
plot(sl_test~Y_test, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_test~Y_test), col="red")
lines(lowess(Y_test, sl_test), col="blue")
mtext( paste0("t=", as.character(t)), side = 3, line = -17, outer = TRUE, cex = 2)
t = 3
alpha = 0
name.id = paste0("t=", as.character(t), "+alpha=", as.character(alpha))
par(mfrow=c(2,2))
sl_train = read_table(paste0("sl_train+", name.id, ".txt"), col_names = F)$X1
label_train = as.factor(read_table(paste0("label_train+", name.id, ".txt"), col_names = F)$X1)
plot(sl_train~label_train, main = "progression score vs label")
Y_train = read_table(paste0("Y_train+", name.id, ".txt"), col_names = F)$X1
plot(sl_train~Y_train, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_train~Y_train), col="red")
lines(lowess(Y_train, sl_train), col="blue")
sl_test = read_table(paste0("sl_test+", name.id, ".txt"), col_names = F)$X1
label_test = as.factor(read_table(paste0("label_test+", name.id, ".txt"), col_names = F)$X1)
plot(sl_test~label_test, main = "progression score vs label")
Y_test = read_table(paste0("Y_test+", name.id, ".txt"), col_names = F)$X1
plot(sl_test~Y_test, type = 'p', pch = ".", main = "progression score vs clinical score")
abline(lm(sl_test~Y_test), col="red")
lines(lowess(Y_test, sl_test), col="blue")
mtext( paste0("t=", as.character(t)), side = 3, line = -17, outer = TRUE, cex = 2)
library(readr)
setwd("/Users/MonicaW/Documents/GitHub/LWPR/results/scaleY")
library(readr)
setwd("/Users/MonicaW/Documents/GitHub/LWPR/results/scaleY")
setwd("/Users/MonicaW/Documents/GitHub/LWPR/results/scaleY")
t = 1
alpha = 0
name.id = paste0("t=", as.character(t), "+alpha=", as.character(alpha))
feature_id = read_table(paste0("feature_id+", name.id, ".txt"), col_names = F)$X1
feature_id
table(feature_id)
p = 186
X.interaction.list = list()
k = 0
for (i in 1:p){
for (j in 1:p){
if (i < j){
k = k+1
X.interaction.list[[k]] = c(as.character(i), as.character(j))
}
}
}
X.interaction.list
p = 186
X.interaction.list = list()
k = 0
for (i in 1:p){
for (j in 1:p){
if (i < j){
k = k+1
X.interaction.list[[k]] = paste0(as.character(i), "+", as.character(j))
}
}
}
X.interaction.lis
X.interaction.list
X.interaction.list = do.call(c, X.interaction.list)
X.interaction.list
table(feature_id)
feature_id
table(feature_id)
name(table(feature_id))
col_name(table(feature_id))
colnames(table(feature_id))
table(feature_id)
X.interaction.list
c(as.character(seq(1,186), X.interaction.list)
)
c(as.character(seq(1,186)), X.interaction.list)
feature_names = c(as.character(seq(1,186)), X.interaction.list)
table(feature_id)
test = table(feature_id)
names(test)
colnames(test)
as.numeric(names(test))
feature_names[as.numeric(names(table(feature_id)))]
load("sim_par06.RData")
getwd()
setwd("/Users/MonicaW/Documents/GitHub/LWPR/simulation")
ls
getwd()
load("sim_par06.RData")
source("sim.fun.R")
data.list = lapply(1:2, function(ix) mysimulation3(n, p1, p2, p3, pc, p0, Sigma_1, Sigma_2, Sigma_3, Sigma_c, Sigma_0, rho_e, w))
X.list = lapply(1:2, function(ix) data.list[[ix]]$X)
Y.list = lapply(1:2, function(ix) data.list[[ix]]$Y)
X1 = mvrnorm(n = n, rep(0, p1), Sigma_1)
X2 = mvrnorm(n = n, rep(0, p2), Sigma_2)
X3 = mvrnorm(n = n, rep(0, p3), Sigma_3)
Xc = mvrnorm(n = n, rep(0, pc), Sigma_c)
X0 = mvrnorm(n = n, rep(0, p0), Sigma_0)
X = cbind(X1, X2, X3, Xc, X0)
linpred1 = -4 - X%*%w
linpred2 = 4 - X%*%w
linpred1
P1 = exp(linpred1)/(1+exp(linpred1))
P12 = exp(linpred2)/(1+exp(linpred2))
P.mtx = cbind(P1, P12-P1, 1-P12)
label = as.ordered(apply(P.mtx, 1, which.max))
label
s = X%*%w
o = order(s)
s = s[o] - min(s)
s
plot(s)
plot(s)
plot(X%*%w)
plot(order(X%*%w))
label
X = X[o,]
label = label[o]
X1 = X1[o,]
X2 = X2[o,]
X3 = X3[o,]
Xc = Xc[o,]
X0 = X0[o,]
n.class = sapply(1:3, function(id) sum(label==id))
n.class
mybeta1 = matrix(rep(c(rep(1, n.class[1]), rep(0, n.class[2]+n.class[3])), p1), ncol = p1)
mybeta2 = matrix(rep(c(rep(0, n.class[1]), rep(2, n.class[2]), rep(0, n.class[3])), p2), ncol = p2)
mybeta3 = matrix(rep(c(rep(0, n.class[1]+n.class[2]), rep(3, n.class[3])), p3), ncol = p3)
mybetac = matrix(rep(c(rep(1, n.class[1]), rep(1.5, n.class[2]), rep(2, n.class[3])), pc), ncol = pc)
err = mvrnorm(n = n, 0, rho_e)[,1]
signal = s/5 + diag(X1%*%t(mybeta1)) + diag(X2%*%t(mybeta2)) + diag(X3%*%t(mybeta3)) + diag(Xc%*%t(mybetac))
Y = signal + err
plot(Y)
diag(X1%*%t(mybeta1)) + diag(X2%*%t(mybeta2)) + diag(X3%*%t(mybeta3)) + diag(Xc%*%t(mybetac))
plot(Y~s)
plot(s~Y)
plot(s~label)
plot(log(s+1)~label)
plot(log(Y+100)~s)
plot(log(Y+100))
plot(Y
)
plot(log(Y+20))
load("~/Documents/GitHub/LWPR/results/debug/debugdata.RData")
Yhat.mymethodPen
rwrf.list[[26]]
debugSource('~/Documents/GitHub/LWPR/function/fun.rfguided.R', echo=TRUE)
pom.list = penalized.origin.method(X.selected.feature.list[[1]], Y.list[[1]], X.selected.feature.list[[2]], rwrf.list, lambda.selected, alpha)
diff.mtx.list
x = 26
if(sd(Y.train[wrf.list[[x]]!=0])==0 | length(Y.train[wrf.list[[x]]!=0])<=1) {
matrix(rep(c(mean(Y.train[wrf.list[[x]]!=0]), rep(0, p)), nlambda), ncol = nlambda)}else{
as.matrix(coef(glmnet(x = diff.mtx.list[[x]], y = Y.train, weights = wrf.list[[x]], alpha = alpha, lambda = lambda.vec)))
}
library(glmnet)
sd(Y.train[wrf.list[[x]]!=0])==0
diff.mtx.list
diff.mtx.list
x
sd(Y.train[wrf.list[[x]]!=0])==0
length(Y.train[wrf.list[[x]]!=0])<=1
matrix(rep(c(mean(Y.train[wrf.list[[x]]!=0]), rep(0, p)), nlambda), ncol = nlambda)
length(Y.train[wrf.list[[x]]!=0])<=5
wrf.list
rwrf.list
Yhat.mymethodPen
cbind(Yhat.mymethodPen, exp(Y.list[[2]]))
rwrf.list[[2]]
sum(rwrf.list[[2]]>1e-2)
cbind(Yhat.mymethodPen, exp(Y.list[[2]]))
sum(rwrf.list[[1]]>1e-2)
sum(rwrf.list[[10]]>1e-2)
sum(rwrf.list[[10]]>1e-1)
sum(rwrf.list[[10]]>1e-1.5)
sum(rwrf.list[[10]]>1e-2)
sum(rwrf.list[[26]]>1e-2)
sum(rwrf.list[[25]]>1e-2)
sum(rwrf.list[[177]]>1e-2)
sum(rwrf.list[[176]]>1e-2)
sum(rwrf.list[[175]]>1e-2)
sum(rwrf.list[[174]>1e-2)
sum(rwrf.list[[174]]>1e-2)
sum(rwrf.list[[122]]>1e-2)
sum(rwrf.list[[125]]>1e-2)
sum(rwrf.list[[119]]>1e-2)
sum(rwrf.list[[31]]>1e-2)
id.which
Di.selected
sl.list
sl.list[[2]][26]
plot(sl.list[[1]])
plot(sl.list[[1]])
plot(sl.list[[2]])
boxplot(sl.list[[2]])
quantile(sl.list[[2]], .75)
quantile(sl.list[[2]], .95)
quantile(sl.list[[2]], .98)
plot(sl.list[[2]])
boxplot(sl.list[[2]])
quantile(sl.list[[2]], .975)
quantile(sl.list[[2]], .025)
outer(sl.list[[2]])
plot(sl.list[[1]])
source('~/Documents/GitHub/LWPR/function/fun.rfguided.R', echo=TRUE)
Yhat.mymethod = mymethod.res$Yhat
rwrf.list = mymethod.res$w.list
pom.list = penalized.origin.method(X.selected.feature.list[[1]], Y.list[[1]], X.selected.feature.list[[2]], rwrf.list, lambda.selected, alpha)
Yhat.mymethodPen = pom.list$Yhat
Yhat.mymethod = exp(Yhat.mymethod)
Yhat.mymethodPen = exp(Yhat.mymethodPen)
mae.mymethod = mean(abs(Yhat.mymethod - exp(Y.list[[2]])))
mae.mymethod
mae.mymethodPen = mean(abs(Yhat.mymethodPen - exp(Y.list[[2]])))
mae.mymethodPen
corr.mymethod = cor(Yhat.mymethod, exp(Y.list[[2]]))
mae.mymethodPen = mean(abs(Yhat.mymethodPen - exp(Y.list[[2]])))
corr.mymethodPen = cor(Yhat.mymethodPen, exp(Y.list[[2]]))
corr.mymethodPen
corr.mymethod
mae.mymethodPen = mean(abs(Yhat.mymethodPen - exp(Y.list[[2]])))
mae.mymethodPen
source('~/Documents/GitHub/LWPR/function/fun.rfguided.R', echo=TRUE)
if(id.which == 1){
ml.rf = randomForest(x = X.selected.feature.list[[1]], y = Y.list[[1]], keep.inbag = T, ntree = 100)
wrf.list = rf.weight(ml.rf, X.selected.feature.list[[1]], X.selected.feature.list[[2]])
mymethod.res = SlRf.weight.noDb(wrf.list, Y.list[[1]], sl.list[[1]], sl.list[[2]], Di.selected)
}else{
mymethod.res = slnp.noDb(X.selected.feature.list[[1]], Y.list[[1]], sl.list[[1]], X.selected.feature.list[[2]], Y.list[[2]], sl.list[[2]], Di.selected)
}
Yhat.mymethod = mymethod.res$Yhat
rwrf.list = mymethod.res$w.list
pom.list = penalized.origin.method(X.selected.feature.list[[1]], Y.list[[1]], X.selected.feature.list[[2]], rwrf.list, lambda.selected, alpha)
Yhat.mymethodPen = pom.list$Yhat
Yhat.mymethod = exp(Yhat.mymethod)
Yhat.mymethodPen = exp(Yhat.mymethodPen)
mae.mymethod = mean(abs(Yhat.mymethod - exp(Y.list[[2]])))
corr.mymethod = cor(Yhat.mymethod, exp(Y.list[[2]]))
mae.mymethodPen = mean(abs(Yhat.mymethodPen - exp(Y.list[[2]])))
corr.mymethodPen = cor(Yhat.mymethodPen, exp(Y.list[[2]]))
mae.mymethod
mae.mymethodPen
plot(sl.list[[1]])
install.packages("outliers")
library(outliers)
outlier(sl.list[[1]])
dixon.test(sl.list[[1]])
rm.outlier(sl.list[[1]])
length(sl.list[[1]])
plot(rm.outlier(sl.list[[1]]))
boxplot(sl.list[[1]])$out
boxplot(sl.list[[1]])
boxplot(sl.list[[1]], plot=F)$out
boxplot(sl.list[[1]], plot=F)$stats
boxplot(sl.list[[2]], plot=F)$stats
boxplot(sl.list[[2]])$stats
boxplot(sl.list[[2]])$out
boxplot(sl.list[[1]], plot=F)$stats
boxplot(sl.list[[1]], plot=F)$stats[1,1]
boxplot(sl.list[[1]], plot=F)$stats[5,1]
sl.list[[1]] < boxplot(sl.list[[1]], plot=F)$stats[1,1]
sl.list[[1]][sl.list[[1]] < boxplot(sl.list[[1]], plot=F)$stats[1,1]]
sl.list[[1]][sl.list[[1]] < boxplot(sl.list[[1]], plot=F)$stats[1,1]] = boxplot(sl.list[[1]], plot=F)$stats[1,1]
sl.list[[1]][sl.list[[1]] > boxplot(sl.list[[1]], plot=F)$stats[5,1]] = boxplot(sl.list[[1]], plot=F)$stats[5,1]
boxplot(sl.list[[1]])
sl.list[[2]][sl.list[[2]] < boxplot(sl.list[[2]], plot=F)$stats[1,1]] = boxplot(sl.list[[2]], plot=F)$stats[1,1]
sl.list[[2]][sl.list[[2]] > boxplot(sl.list[[2]], plot=F)$stats[5,1]] = boxplot(sl.list[2]], plot=F)$stats[5,1]
sl.list[[2]][sl.list[[2]] > boxplot(sl.list[[2]], plot=F)$stats[5,1]] = boxplot(sl.list[[2]], plot=F)$stats[5,1]
boxplot(sl.list[[2]])
plot(sl.list[[2]])
Di.vec = seq(sd(sl.list[[1]])/5, sd(sl.list[[1]])*2, length.out = 20)
par.list = cv.bothPen.noDb(label.list[[1]], X.selected.feature.list[[1]], Y.list[[1]], lambda.vec, alpha, nfolds.llr, sl.list[[1]], Di.vec)
library(caret)
library(methods) # "is function issue by Rscript"
library(energy)
library(glmnet)
library(randomForest)
par.list = cv.bothPen.noDb(label.list[[1]], X.selected.feature.list[[1]], Y.list[[1]], lambda.vec, alpha, nfolds.llr, sl.list[[1]], Di.vec)
Di.selected = par.list$Di
lambda.selected = par.list$lambda
id.which = par.list$id.which
print("Finish SlRf cross validation")
if(id.which == 1){
ml.rf = randomForest(x = X.selected.feature.list[[1]], y = Y.list[[1]], keep.inbag = T, ntree = 100)
wrf.list = rf.weight(ml.rf, X.selected.feature.list[[1]], X.selected.feature.list[[2]])
mymethod.res = SlRf.weight.noDb(wrf.list, Y.list[[1]], sl.list[[1]], sl.list[[2]], Di.selected)
}else{
mymethod.res = slnp.noDb(X.selected.feature.list[[1]], Y.list[[1]], sl.list[[1]], X.selected.feature.list[[2]], Y.list[[2]], sl.list[[2]], Di.selected)
}
id.which
print("Finish local fitting without penalization")
Yhat.mymethod = mymethod.res$Yhat
rwrf.list = mymethod.res$w.list
rwrf.list
rwrf.list[[26]]
pom.list = penalized.origin.method(X.selected.feature.list[[1]], Y.list[[1]], X.selected.feature.list[[2]], rwrf.list, lambda.selected, alpha)
Yhat.mymethodPen = pom.list$Yhat
print("Finish local fitting with penalization")
Yhat.mymethod = exp(Yhat.mymethod)
Yhat.mymethodPen = exp(Yhat.mymethodPen)
mae.mymethod = mean(abs(Yhat.mymethod - exp(Y.list[[2]])))
corr.mymethod = cor(Yhat.mymethod, exp(Y.list[[2]]))
mae.mymethodPen = mean(abs(Yhat.mymethodPen - exp(Y.list[[2]])))
corr.mymethodPen = cor(Yhat.mymethodPen, exp(Y.list[[2]]))
mae.mymethod
mae.mymethodPen
cbind(Yhat.mymethodPen, Y.list[[2]])
cbind(Yhat.mymethodPen, exp(Y.list[[2]]))
corr.mymethod = cor(Yhat.mymethod, exp(Y.list[[2]]))
corr.mymethod
corr.mymethodPen
source('~/Documents/GitHub/LWPR/function/fun.rfguided.R', echo=TRUE)
Yhat.mymethod = mymethod.res$Yhat
rwrf.list = mymethod.res$w.list
pom.list = penalized.origin.method(X.selected.feature.list[[1]], Y.list[[1]], X.selected.feature.list[[2]], rwrf.list, lambda.selected, alpha)
Yhat.mymethodPen = pom.list$Yhat
print("Finish local fitting with penalization")
Yhat.mymethod = exp(Yhat.mymethod)
Yhat.mymethodPen = exp(Yhat.mymethodPen)
mae.mymethod = mean(abs(Yhat.mymethod - exp(Y.list[[2]])))
corr.mymethod = cor(Yhat.mymethod, exp(Y.list[[2]]))
mae.mymethodPen = mean(abs(Yhat.mymethodPen - exp(Y.list[[2]])))
corr.mymethodPen = cor(Yhat.mymethodPen, exp(Y.list[[2]]))
mae.mymethod
mae.mymethodPen
corr.mymethodPen
corr.mymethod
boxplot(sl.list[[1]], plot=F)$stats[1,1]
boxplot(sl.list[[1]], plot=F)$stats[c(1,5),1]
boxplot(sl.list[[1]], plot=F)$stats[c(1,5),1][1]
boxplot(sl.list[[1]], plot=F)$stats[c(1,5),1][2]
source('~/Documents/GitHub/LWPR/function/ordinlog1.R', echo=TRUE)
ordinlog.list = cv.ordinlog.en(label.list[[1]], X.list[[1]], Y.list[[1]], gamma.vec, alpha0, initial.x, nfolds.log, "corr")
Slhat.extvalues.list
lapply(1:length(Slhat.val.list), function(ix) Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2])
ix = 1
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2]
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]]
Slhat.val.list[[ix]][Slhat.val.list[[ix]] < Slhat.extvalues.list[[ix]][1]]
ix = 40
Slhat.val.list[[ix]][Slhat.val.list[[ix]] < Slhat.extvalues.list[[ix]][1]]
Slhat.val.list[[ix]][Slhat.val.list[[ix]] < Slhat.extvalues.list[[ix]][1]]
Slhat.val.list
Slhat.extvalues.list
ix = 50
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]]
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2]
Slhat.val.list[[ix]]
lapply(1:length(Slhat.val.list), function(ix) {Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2] return(Slhat.val.list[[ix]])})
lapply(1:length(Slhat.val.list), function(ix) {Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2] return(Slhat.val.list[[ix]])})
lapply(1:length(Slhat.val.list), function(ix) Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2] Slhat.val.list[[ix]])
lapply(1:length(Slhat.val.list), function(ix) Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2])
Slhat.val.list[[50]]
Slhat.val.list[[49]]
Slhat.extvalues.list
Slhat.val.list[[49]]
lapply(1:length(Slhat.val.list), function(ix){
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2]
Slhat.val.list[[ix]]
})
lapply(1:length(Slhat.val.list), function(ix){
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2]
#Slhat.val.list[[ix]]
})
lapply(1:length(Slhat.val.list), function(ix){
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2]
Slhat.val.list[[ix]]
})
Slhat.val.list = lapply(ml.list, function(ml) X.val%*%ml$w)
Slhat.extvalues.list = lapply(Slhat.val.list, function(sl) boxplot(sl, plot = F)$stats[c(1,5),1])
Slhat.extvalues.list
lapply(1:length(Slhat.val.list), function(ix){
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2]
Slhat.val.list[[ix]][Slhat.val.list[[ix]] < Slhat.extvalues.list[[ix]][1]] = Slhat.extvalues.list[[ix]][1]
Slhat.val.list[[ix]]
})
Slhat.val.list
Slhat.val.list = lapply(1:length(Slhat.val.list), function(ix){
Slhat.val.list[[ix]][Slhat.val.list[[ix]] > Slhat.extvalues.list[[ix]][2]] = Slhat.extvalues.list[[ix]][2]
Slhat.val.list[[ix]][Slhat.val.list[[ix]] < Slhat.extvalues.list[[ix]][1]] = Slhat.extvalues.list[[ix]][1]
Slhat.val.list[[ix]]
})
corr.list[[i]] = as.vector(sapply(Slhat.val.list, function(Slhat) cor(Slhat, Y.val)))
corr.list
ix
sl.list
sl.list[[1]]
boxplot(sl.list[[1]])
boxplot(sl.list[[1]])
sl.list[[1]][1]=100
boxplot(sl.list[[1]])
sl.list = lapply(1:2, function(ix){
sl.list[[ix]][sl.list[[ix]] > boxplot(sl.list[[ix]], plot = F)$stats[5,1]] = boxplot(sl.list[[ix]], plot = F)$stats[5,1]
sl.list[[ix]][sl.list[[ix]] > boxplot(sl.list[[ix]], plot = F)$stats[1,1]] = boxplot(sl.list[[ix]], plot = F)$stats[1,1]
sl.list[[ix]]
})
boxplot(sl.list[[1]])
sl.list[[1]][1]=100
boxplot(sl.list[[1]])$stat
boxplot(sl.list[[1]])$stats
sl.list[[1]][1]=10
boxplot(sl.list[[1]])$stats
boxplot(sl.list[[2]])$stats
sl.list = lapply(1:2, function(x) as.vector(X.list[[x]]%*%ordin.ml$w))
sl.list
sl.list = lapply(1:2, function(ix){
sl.list[[ix]][sl.list[[ix]] > boxplot(sl.list[[ix]], plot = F)$stats[5,1]] = boxplot(sl.list[[ix]], plot = F)$stats[5,1]
sl.list[[ix]][sl.list[[ix]] < boxplot(sl.list[[ix]], plot = F)$stats[1,1]] = boxplot(sl.list[[ix]], plot = F)$stats[1,1]
sl.list[[ix]]
})
sl.list
boxplot(sl.list)
sl.list = lapply(1:2, function(x) as.vector(X.list[[x]]%*%ordin.ml$w))
boxplot(sl.list)
sl.list = lapply(1:2, function(x) as.vector(X.list[[x]]%*%ordin.ml$w))
boxplot(sl.list)
sl.list = lapply(1:2, function(ix){
sl.list[[ix]][sl.list[[ix]] > boxplot(sl.list[[ix]], plot = F)$stats[5,1]] = boxplot(sl.list[[ix]], plot = F)$stats[5,1]
sl.list[[ix]][sl.list[[ix]] < boxplot(sl.list[[ix]], plot = F)$stats[1,1]] = boxplot(sl.list[[ix]], plot = F)$stats[1,1]
sl.list[[ix]]
})
boxplot(sl.list)
install.packages("devtools")
devtools::install_bitbucket("mdonohue/ltjmm")
